// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertySearch.Infrastructure.Persistence;

#nullable disable

namespace PropertySearch.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825104347_initCreate")]
    partial class initCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6c7a4b20-5f33-4a1c-8e5d-3a2f0c123456",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d7a4b61a-7f33-4d2c-9fc2-0d94a7e7c6f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c3d4527-77be-48ae-a7bb-993b8f779c68",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkjwkbi0S+xI4L6k66/svhooc3wb8nGhv1l0HcG25qG+KrtNz3qeZ9dXbgvUvAGhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b9a6f12-3f62-4a4a-9425-4dbe49e2c63d",
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d7a4b61a-7f33-4d2c-9fc2-0d94a7e7c6f7",
                            RoleId = "6c7a4b20-5f33-4a1c-8e5d-3a2f0c123456"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1d1a7b6-68a6-4d89-8cc9-b0b6e83a8767"),
                            Code = "USA",
                            Name = "United States"
                        },
                        new
                        {
                            Id = new Guid("fab9a17c-4d8f-468b-9d90-a9afba263d98"),
                            Code = "CAN",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("3966addb-172c-43f0-afb7-7a53ca03bb59"),
                            Code = "IND",
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("ce6af6ca-30f7-4df5-9abf-5b9c5b2e4195"),
                            Code = "UK",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("5ddb4208-6a29-49e6-8011-5a2224cec5de"),
                            Code = "AUS",
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Price");

                    b.HasIndex("StateId");

                    b.HasIndex("Type");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("746ef692-61b6-4780-a02f-a36c1c96f4c5"),
                            Address = "123 Main St",
                            City = "Los Angeles",
                            CountryId = new Guid("f1d1a7b6-68a6-4d89-8cc9-b0b6e83a8767"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Modern 2BHK apartment near downtown Los Angeles.",
                            PostalCode = "90001",
                            Price = 250000m,
                            StateId = new Guid("4b805e95-4827-46c5-a2bd-4702871b3be5"),
                            Type = "Apartment"
                        },
                        new
                        {
                            Id = new Guid("1b3af3ce-cf6d-4af0-b352-5c79b13a893c"),
                            Address = "67 Sunset Blvd",
                            City = "Los Angeles",
                            CountryId = new Guid("f1d1a7b6-68a6-4d89-8cc9-b0b6e83a8767"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Affordable studio in downtown LA.",
                            PostalCode = "90028",
                            Price = 150000m,
                            StateId = new Guid("4b805e95-4827-46c5-a2bd-4702871b3be5"),
                            Type = "Apartment"
                        },
                        new
                        {
                            Id = new Guid("94827cea-127a-480d-9781-111e27d17256"),
                            Address = "45 Bay St",
                            City = "Toronto",
                            CountryId = new Guid("fab9a17c-4d8f-468b-9d90-a9afba263d98"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Luxury condo with lake view in Toronto.",
                            PostalCode = "M5J2X2",
                            Price = 450000m,
                            StateId = new Guid("89fd420c-c260-42f8-99bf-f15f9c0c8967"),
                            Type = "Condo"
                        },
                        new
                        {
                            Id = new Guid("ce993b27-6852-4f24-87ae-4163a81bf8ea"),
                            Address = "56 Greenfield Rd",
                            City = "Ottawa",
                            CountryId = new Guid("fab9a17c-4d8f-468b-9d90-a9afba263d98"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Farmhouse in Ontario countryside.",
                            PostalCode = "K1A0B1",
                            Price = 2000000m,
                            StateId = new Guid("89fd420c-c260-42f8-99bf-f15f9c0c8967"),
                            Type = "House"
                        },
                        new
                        {
                            Id = new Guid("c97eca96-eb6f-4859-b69c-7c7f5028d24c"),
                            Address = "78 Marine Drive",
                            City = "Mumbai",
                            CountryId = new Guid("3966addb-172c-43f0-afb7-7a53ca03bb59"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Spacious villa in Mumbai with private pool.",
                            PostalCode = "400020",
                            Price = 15000000m,
                            StateId = new Guid("ffcb5e16-71b2-4976-b859-4f7a58c177bf"),
                            Type = "Villa"
                        },
                        new
                        {
                            Id = new Guid("05fb82f6-fe00-4605-9546-81c03bba0a9c"),
                            Address = "99 Altamount Rd",
                            City = "Mumbai",
                            CountryId = new Guid("3966addb-172c-43f0-afb7-7a53ca03bb59"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Ultra-luxury condo in South Mumbai.",
                            PostalCode = "400026",
                            Price = 30000000m,
                            StateId = new Guid("ffcb5e16-71b2-4976-b859-4f7a58c177bf"),
                            Type = "Condo"
                        },
                        new
                        {
                            Id = new Guid("02fcd393-4074-4cee-b92c-ff873e9cf88e"),
                            Address = "22 Baker St",
                            City = "London",
                            CountryId = new Guid("ce6af6ca-30f7-4df5-9abf-5b9c5b2e4195"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Family house in central London.",
                            PostalCode = "NW16XE",
                            Price = 800000m,
                            StateId = new Guid("c5a345e8-c0fa-4a51-81fa-7ec0334e378c"),
                            Type = "House"
                        },
                        new
                        {
                            Id = new Guid("520c4026-1436-4b9c-a996-f0776b2b3131"),
                            Address = "15 Tower St",
                            City = "London",
                            CountryId = new Guid("ce6af6ca-30f7-4df5-9abf-5b9c5b2e4195"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Modern apartment near Canary Wharf.",
                            PostalCode = "E145HQ",
                            Price = 950000m,
                            StateId = new Guid("c5a345e8-c0fa-4a51-81fa-7ec0334e378c"),
                            Type = "Apartment"
                        },
                        new
                        {
                            Id = new Guid("44040603-ed61-4b7e-a4cb-e2625a126d21"),
                            Address = "12 George St",
                            City = "Sydney",
                            CountryId = new Guid("5ddb4208-6a29-49e6-8011-5a2224cec5de"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Large house in Sydney suburb.",
                            PostalCode = "2000",
                            Price = 1200000m,
                            StateId = new Guid("ec300f25-fddd-4d70-85b2-d55d297e48d7"),
                            Type = "House"
                        },
                        new
                        {
                            Id = new Guid("0039260c-1391-43fb-994d-acd845399ddc"),
                            Address = "5 Hill Rd",
                            City = "Blue Mountains",
                            CountryId = new Guid("5ddb4208-6a29-49e6-8011-5a2224cec5de"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Spacious plot of land in the scenic Blue Mountains, ideal for building or investment.",
                            PostalCode = "2780",
                            Price = 600000m,
                            StateId = new Guid("ec300f25-fddd-4d70-85b2-d55d297e48d7"),
                            Type = "Land"
                        });
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.Space", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("Size");

                    b.HasIndex("Type");

                    b.ToTable("Spaces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f8e9140-6436-48c1-8877-4b791f5389aa"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Master bedroom with attached bathroom.",
                            PropertyId = new Guid("746ef692-61b6-4780-a02f-a36c1c96f4c5"),
                            Size = 200f,
                            Type = "Bedroom"
                        },
                        new
                        {
                            Id = new Guid("d7f6c0d4-bf2c-4e4f-9e1f-3a0524523b30"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Spacious living area with balcony.",
                            PropertyId = new Guid("746ef692-61b6-4780-a02f-a36c1c96f4c5"),
                            Size = 350f,
                            Type = "Living Room"
                        },
                        new
                        {
                            Id = new Guid("f812ebe2-0320-4e74-83e4-a4553d80e499"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Modular kitchen with modern fittings.",
                            PropertyId = new Guid("1b3af3ce-cf6d-4af0-b352-5c79b13a893c"),
                            Size = 180f,
                            Type = "Kitchen"
                        },
                        new
                        {
                            Id = new Guid("5d546e7d-ab65-413a-b4f3-71cdfff51f80"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "2-car parking garage.",
                            PropertyId = new Guid("1b3af3ce-cf6d-4af0-b352-5c79b13a893c"),
                            Size = 500f,
                            Type = "Garage"
                        },
                        new
                        {
                            Id = new Guid("4a1eccc5-d9ad-42a7-842c-57d4d2be7c1f"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Private landscaped garden.",
                            PropertyId = new Guid("94827cea-127a-480d-9781-111e27d17256"),
                            Size = 800f,
                            Type = "Garden"
                        },
                        new
                        {
                            Id = new Guid("f16c0f05-c758-416e-8d30-bd764dc2389b"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Spacious living room with natural light and modern furniture.",
                            PropertyId = new Guid("94827cea-127a-480d-9781-111e27d17256"),
                            Size = 350f,
                            Type = "Living Room"
                        },
                        new
                        {
                            Id = new Guid("bdb47a89-5aa8-4eda-baba-7515b97231b2"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Cozy bedroom with built-in wardrobe and large window.",
                            PropertyId = new Guid("ce993b27-6852-4f24-87ae-4163a81bf8ea"),
                            Size = 180f,
                            Type = "Bedroom"
                        },
                        new
                        {
                            Id = new Guid("5a1d9fb0-6d93-4d91-a0c0-d630e91a9d49"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Master bedroom with ensuite bathroom and balcony view.",
                            PropertyId = new Guid("ce993b27-6852-4f24-87ae-4163a81bf8ea"),
                            Size = 200f,
                            Type = "Bedroom"
                        },
                        new
                        {
                            Id = new Guid("6497a348-d03d-4ccc-b7a2-115a588ed337"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Modern kitchen with island and high-end appliances.",
                            PropertyId = new Guid("c97eca96-eb6f-4859-b69c-7c7f5028d24c"),
                            Size = 150f,
                            Type = "Kitchen"
                        },
                        new
                        {
                            Id = new Guid("8e07e7ef-9ff2-4de5-af69-dc976cefd76e"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Two-car garage with storage space and automatic door.",
                            PropertyId = new Guid("c97eca96-eb6f-4859-b69c-7c7f5028d24c"),
                            Size = 220f,
                            Type = "Garage"
                        },
                        new
                        {
                            Id = new Guid("3eaa205a-a8a2-4436-a716-73617039498c"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Open-plan living room with modern decor and entertainment area.",
                            PropertyId = new Guid("05fb82f6-fe00-4605-9546-81c03bba0a9c"),
                            Size = 400f,
                            Type = "Living Room"
                        },
                        new
                        {
                            Id = new Guid("b4bb1cff-d02f-4981-943e-af1fa11dc1e1"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Well-maintained garden with outdoor seating and plants.",
                            PropertyId = new Guid("05fb82f6-fe00-4605-9546-81c03bba0a9c"),
                            Size = 500f,
                            Type = "Garden"
                        },
                        new
                        {
                            Id = new Guid("376f54b3-e5cf-46e9-a202-f3c2961b2c75"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Spacious garage suitable for two vehicles and storage.",
                            PropertyId = new Guid("02fcd393-4074-4cee-b92c-ff873e9cf88e"),
                            Size = 300f,
                            Type = "Garage"
                        },
                        new
                        {
                            Id = new Guid("f9319ede-ddcd-4abe-9f5f-97291254906c"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Guest bedroom with comfortable bed and study desk.",
                            PropertyId = new Guid("02fcd393-4074-4cee-b92c-ff873e9cf88e"),
                            Size = 160f,
                            Type = "Bedroom"
                        },
                        new
                        {
                            Id = new Guid("9813899c-035b-4451-b947-90d39739c3e8"),
                            CreatedAt = new DateTime(2025, 8, 21, 13, 29, 0, 0, DateTimeKind.Local),
                            Description = "Elegant living room with fireplace and entertainment setup.",
                            PropertyId = new Guid("520c4026-1436-4b9c-a996-f0776b2b3131"),
                            Size = 450f,
                            Type = "Living Room"
                        });
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b805e95-4827-46c5-a2bd-4702871b3be5"),
                            Code = "CA",
                            CountryId = new Guid("f1d1a7b6-68a6-4d89-8cc9-b0b6e83a8767"),
                            Name = "California"
                        },
                        new
                        {
                            Id = new Guid("89fd420c-c260-42f8-99bf-f15f9c0c8967"),
                            Code = "ON",
                            CountryId = new Guid("fab9a17c-4d8f-468b-9d90-a9afba263d98"),
                            Name = "Ontario"
                        },
                        new
                        {
                            Id = new Guid("ffcb5e16-71b2-4976-b859-4f7a58c177bf"),
                            Code = "MH",
                            CountryId = new Guid("3966addb-172c-43f0-afb7-7a53ca03bb59"),
                            Name = "Maharashtra"
                        },
                        new
                        {
                            Id = new Guid("c5a345e8-c0fa-4a51-81fa-7ec0334e378c"),
                            Code = "LDN",
                            CountryId = new Guid("ce6af6ca-30f7-4df5-9abf-5b9c5b2e4195"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("ec300f25-fddd-4d70-85b2-d55d297e48d7"),
                            Code = "NSW",
                            CountryId = new Guid("5ddb4208-6a29-49e6-8011-5a2224cec5de"),
                            Name = "New South Wales"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.Property", b =>
                {
                    b.HasOne("PropertySearch.Core.Entities.Country", "Country")
                        .WithMany("Properties")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropertySearch.Core.Entities.State", "State")
                        .WithMany("Properties")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.Space", b =>
                {
                    b.HasOne("PropertySearch.Core.Entities.Property", "Property")
                        .WithMany("Spaces")
                        .HasForeignKey("PropertyId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.State", b =>
                {
                    b.HasOne("PropertySearch.Core.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.Country", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("States");
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.Property", b =>
                {
                    b.Navigation("Spaces");
                });

            modelBuilder.Entity("PropertySearch.Core.Entities.State", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
